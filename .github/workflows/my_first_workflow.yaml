# This is a basic workflow to help you get started with Actions

name: CICD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ 'v[0-9]+.[0-9]+' ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
 
permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Build
    runs-on: "ubuntu-20.04"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'table'
          output: 'trivy-report.txt'
          exit-code: '1'
          severity: 'HIGH'
         
      
     
      - name: Upload Trivy table report
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: trivy-report
          path: trivy-report.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ccathiia1/go-fortune:${{ github.sha }}

      - name: Install cosign
        uses: sigstore/cosign-installer@main

      - name: Sign image
        run: |
          echo "${{ secrets.COSIGN_KEY }}" > cosign.key
          cosign sign --key ./cosign.key -y ccathiia1/go-fortune:${{ github.sha }}

      - name: Send custom JSON data to Slack workflow
        # id: slack
        # uses: slackapi/slack-github-action@v1.24.0
        # with:
        #   # This data can be any valid JSON from a previous step in the GitHub Action
        #   payload: |
        #     {
        #       "key": "value",
        #       "foo": "bar"
        #     }
        # env:
        #   SLACK_WEBHOOK_URL: ${{ secrets.SLACK_TEST_LINK }}
        run: echo 'success'
            